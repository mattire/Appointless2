@model AppointLess2.ViewModels.BookingWeekVM

@{
    ViewBag.Title = "WeekView";
}

<h2>Ajanvaraus - @Model.Schedule.Name</h2>

@if (Model.WeekDays.First() > DateTime.Now)
{
    @Html.ActionLink("Edellinen viikko", "Previous", "Bookings", new {
    Day = Model.WeekDays.ElementAt(0).Day,
    Month = Model.WeekDays.ElementAt(0).Month,
    Year = Model.WeekDays.ElementAt(0).Year,
    Schedule = Model.Schedule.Id
}, null)
}
<br />
@Html.ActionLink("Seuraava viikko", "Next", "Bookings", new {
    Day = Model.WeekDays.ElementAt(0).Day,
    Month = Model.WeekDays.ElementAt(0).Month,
    Year = Model.WeekDays.ElementAt(0).Year,
    Schedule = Model.Schedule.Id
}, null)
<br />


@{
    // Write Bookings and Days for each timeslot (in int format) for javascript to read
    foreach (var tsWIBs in Model.TimeSlotWeekIntBookingsMap)
    {
        <span class="timeslot" style="display:none">@tsWIBs.Key.TimeOfDay.Hours,@tsWIBs.Key.TimeOfDay.Minutes,@tsWIBs.Key.LengthMinutes,@tsWIBs.Value.Item1,@tsWIBs.Value.Item2,@tsWIBs.Key.Id</span>
    }

    int startHour = Model.Schedule.StartOfDay ?? 0;
    int endHour = Model.Schedule.EndOfDay ?? 24;

    var weekStart = Model.WeekDays.First();
    var currentDay = Model.Current;
}

<div class="jumbotron" id="tableContainer">
    <table style="table-layout: fixed; width: 100%;">
        <tr>
            <td>&nbsp;     </td>
            @{
                foreach (var day in Model.WeekDays)
                {
                    <th>@Model.GetDayName(day.DayOfWeek) @day.ToString("d.M")</th>
                }
            }
        </tr>

        @{
            var quarterMins = new List<string>() { "00", "15", "30", "45" };
            for (int hour = startHour; hour < endHour; hour++)
            {
                foreach (var mins in quarterMins)
                {
                    <tr>
                        <td>@hour:@mins</td>
                        <td id="td1-@hour:@mins"></td>
                        <td id="td2-@hour:@mins"></td>
                        <td id="td3-@hour:@mins"></td>
                        <td id="td4-@hour:@mins"></td>
                        <td id="td5-@hour:@mins"></td>
                        <td id="td6-@hour:@mins"></td>
                        <td id="td7-@hour:@mins"></td>
                    </tr>
                }
            }
        }
    </table>
</div>


<div id="EventInput" style="display:none; background-color:#EEEEEE; border:1px solid green; z-index:3; margin: auto; text-align:center">

    <h4>Varaa aika</h4>
    @*@using (Html.BeginForm("Create", "BookingView", FormMethod.Post))*@
    @using (Html.BeginForm("Create", "BookingView"))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary()

        <label id="dateAndTime"></label>
        @Html.HiddenFor(m => m.Booking.EventDate)
        @Html.HiddenFor(m => m.Booking.EventTime)
        @Html.HiddenFor(m => m.Booking.WeekStartYear)

        @Html.LabelFor(m => m.Booking.Email) <br />
        @Html.TextBoxFor(m => m.Booking.Email) <br />
        @Html.ValidationMessageFor(m => m.Booking.Email) <br />

        @Html.LabelFor(m => m.Booking.Name) <br />
        @Html.TextBoxFor(m => m.Booking.Name) <br />

        @Html.LabelFor(m => m.Booking.PhoneNumber) <br />
        @Html.TextBoxFor(m => m.Booking.PhoneNumber) <br />

        <br />
        <input type="submit" value="Lähetä vahvistus viesti" name="answer" style="font-size:medium"
               formaction=@Url.Action("Create") formmethod="post" class="btn btn-primary" /><br />
        <input type="button" value="Sulje" onclick="HideInput();" />

    }

</div>



<script src="~/Scripts/jquery-3.3.1.js"></script>

<script>

    var TimeSlots = [];

    function DaysToNums(days) {
        var nums = [
            (days & 1)  ? 1 : -1,
            (days & 2)  ? 2 : -1,
            (days & 4)  ? 3 : -1,
            (days & 8)  ? 4 : -1,
            (days & 16) ? 5 : -1,
            (days & 32) ? 6 : -1,
            (days & 64) ? 7 : -1,
        ];
        return nums.filter(function (v) { return v != -1 });
    }

    function range(start, end, step = 1) {
        const len = Math.floor((end - start) / step) + 1
        return Array(len).fill().map((_, idx) => start + (idx * step))
    }

    function ToHourMins(hour, min, len) {
        var decStart = parseInt(hour) + parseInt(min) / 60;
        var decDiff = len / 60;
        var decs = range(decStart, decStart + decDiff, 0.25);
        var arr = decs.map(function (d) { var hours = Math.floor(d); mins = (d - hours) * 60; return hours + ":" + MinsToString(mins); });
        arr.pop();
        return arr;
    }

    function ToDtBlocks(hourMins, dnums) {
        return dnums.map(function (d) {
            return hourMins.map(function (hm) {
                return "td" + d + "-" + hm;
            });
        });
    }

    function MinsToString(min) {
        return (min + "").length == 1 ? "0" + min : "" + min;
    }

    function WriteDTBlock(dtBlock, color, tsId) {
        //var borderStyle = "thin solid #000000";
        var borderStyle = "2px solid #000000";
        console.log(dtBlock);
        var dtElems = dtBlock.map(function (dt) { return document.getElementById(dt); });
        var arr = Array.prototype.slice.call(dtElems);
        var first = arr[0];
        var last = arr[arr.length - 1];

        first.style.borderTop = borderStyle;
        last.style.borderBottom = borderStyle;
        arr.forEach(function (elem) {
            elem.style.borderLeft = borderStyle;
            elem.style.borderRight = borderStyle;
            elem.style.backgroundColor = color;
            //elem.dataset["timeSlot"] = tsId;
            elem.addEventListener("click", function () { HandleClick(tsId, elem); }, false);
        });
    }

    function DayNumFromDtStr(tdStr) {
        return tdStr.slice(2, 3);
    }

    function WriteTsToTable(tsStr) {
        //tsStr = tsStr.replace(/\r?\n|\r/g, '');
        var spl = tsStr.split(",");

        var hour = spl[0];
        var min = spl[1];
        var lenMins = spl[2];
        var books = spl[3];
        var days = spl[4];
        var tsId = spl[5];

        var dnums = DaysToNums(days);
        var dbooks = DaysToNums(books);
        var hourMins = ToHourMins(hour, min, lenMins);
        var dtBlocks = ToDtBlocks(hourMins, dnums)

        for (var i in dtBlocks) {
            var dtBlock = dtBlocks[i];
            WriteDTBlock(dtBlock, '#77ccff', tsId);
        }

    }

    var WeekTimeSlots = new Array();

    function HandleClick(tsId, elem) {
        var day = DayNumFromDtStr(elem.id);
        var pair = WeekTimeSlots.find(function (p) { return p.key == tsId; });
        var spl = pair.value;
        var time = spl[0] + ":" + MinsToString(spl[1]) + " len: " + spl[2];
        //var evInpWidth = $('#EventInput').clientWidth;
        var evInpWidth = document.getElementById("EventInput").clientWidth;

        //var middle = (window.innerWidth / 2) - (evInpWidth / 2);

        $('#EventInput').show();

        console.log($('#tableContainer').position.left);
        console.log($('#tableContainer').width());
        console.log($('#EventInput').width());
        console.log(window.width);

        //var middle = $('#tableContainer').position().left + ($('#tableContainer').width() / 2) - ($('#EventInput').width() / 2);
        var middle = (window.innerWidth / 2) - ($('#EventInput').width() / 2)
        console.log(middle);
        //$('#EventInput').parent().css({ position: 'relative' });
        //$("#EventInput").css({ top: event.clientY, left: window.innerWidth / 2 - evInpWidth / 2, position: 'absolute' });
        $("#EventInput").css({ top: event.clientY, left: middle, position: 'absolute' });

        //alert(time);
    }

    function HideInput() {
        //$('#EventInput').style.display = 'none';
        $('#EventInput').hide();
    }

    function InitWeekTimeSlots(contentsLst) {
        var splits = contentsLst.map(function (c) { return c.split(","); });
        for (var i in splits) {
            var spl = splits[i];
            WeekTimeSlots.push({ key: spl[5], value: spl });
        }
        console.log("**");
        console.log(WeekTimeSlots);
    }

    $(document).ready(function () {
        //var dst = @Model.Schedule.StartOfDay;
        //var det = @Model.Schedule.EndOfDay;
        var timeSlots = document.getElementsByClassName("timeslot");
        var arr = Array.prototype.slice.call(timeSlots);
        var contentsLst = arr.map(function (a) { return a.textContent; });

        InitWeekTimeSlots(contentsLst);

        //console.log(contentsLst);
        for (var i in contentsLst) {
            WriteTsToTable(contentsLst[i]);
        }
    });

</script>