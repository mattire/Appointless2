@model AppointLess2.ViewModels.BookingWeekVM

@{
    ViewBag.Title = "Index";
    var NextMonday = Model.WeekDays.ElementAt(0).AddDays(7);
    var PreviousMonday = Model.WeekDays.ElementAt(0).AddDays(-7);
}

@*
    +--------+
    | TEMP   |
    +--------+
*@

<h2>Index</h2>

@if (Model.WeekDays.First() > DateTime.Now)
{
    @Html.ActionLink("Edellinen viikko", "Index", "Temp", new {
    yearDotMothDotDay = PreviousMonday.ToString("yyyy.M.d"),
}, null)
}
<br />
@Html.ActionLink("Seuraava viikko", "Index", "Temp", new {
    yearDotMothDotDay = NextMonday.ToString("yyyy.M.d"),
}, null)


<div class="jumbotron" id="tableContainer">
    <table style="table-layout: fixed; width: 100%;" id="WeekViewTable">
        <tr>
            <td>&nbsp;     </td>
            @{
                foreach (var day in Model.WeekDays)
                {
                    int dow = (int)day.DayOfWeek;
                    var dateStr = day.ToString("yyyy.MM.dd");
                    <th id="th-@dow" data-date-text="@dateStr">@Model.GetDayName(day.DayOfWeek) @day.ToString("d.M")</th>
                }
            }
        </tr>


        @{
            var startHour = (int)Model.Schedule.StartOfDay;
            var endHour = (int)Model.Schedule.EndOfDay;
            var quarterMins = new List
            <string>
                () { "00", "15", "30", "45" };
            for (int hour = startHour; hour < endHour; hour++)
            {
                foreach (var mins in quarterMins)
                {
                    <tr>
                        <td>@hour:@mins</td>
                        <td id="td1-@hour:@mins"></td>
                        <td id="td2-@hour:@mins"></td>
                        <td id="td3-@hour:@mins"></td>
                        <td id="td4-@hour:@mins"></td>
                        <td id="td5-@hour:@mins"></td>
                        <td id="td6-@hour:@mins"></td>
                        <td id="td7-@hour:@mins"></td>
                    </tr>
                }
            }
        }
    </table>
</div>

<div id="EventInput" style="display:none; background-color:#EEEEEE; border:1px solid green; z-index:3; margin: auto; text-align:center">

    @using (Html.BeginForm("CreateBooking1", "BookingView", FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary()

        <label id="dateAndTime"
               style="padding:10px 10px 10px 10px; font-size:large; white-space: pre-wrap"></label><br />
        @Html.HiddenFor(m => m.Booking.EventDate)
        @Html.HiddenFor(m => m.Booking.TimeSlotId);

        <input type="submit" value="Varaa tämä aika" name="answer" style="font-size:medium; margin-bottom:10px"
               formaction=@Url.Action("CreateBooking1") formmethod="post" class="btn btn-primary" /><br />
        <input type="button" value="X" onclick="HideInput('#EventInput');" style="position:absolute; top: -10px; right: -10px" />

    }
</div>

<div id="AdminBookingView" style="display:none; background-color:#EEEEEE; border:1px solid green; z-index:3; margin: auto; text-align:center">
    <h1>Varattu aika</h1>
    <input id="adminEmail"       type="text" style="padding-right:10px;margin:10px;"/>      <br />
    <input id="adminPhone"       type="text" style="padding-right:10px;margin:10px;"/>      <br />
    <input id="adminDescription" type="text" style="padding-right:10px;margin:10px;"/><br />
    <input type="submit" value="Peruuta" name="answer" style="font-size:medium; margin-bottom:10px"
           formaction=@Url.Action("Temp") formmethod="post" class="btn btn-primary" /><br />
    <input type="submit" value="Vahvista" name="answer" style="font-size:medium; margin-bottom:10px"
           formaction=@Url.Action("Temp") formmethod="post" class="btn btn-primary" /><br />
    <input type="button" value="X" onclick="HideInput('#AdminBookingView');" style="position:absolute; top: -10px; right: -10px" />
</div>


<script src="~/Scripts/jquery-3.3.1.js"></script>

<script>

    var Mode = Object.freeze({ "admin": 1, "client": 2 });

    function DaysToNums(days) {
        var nums = [
            (days & 1) ? 1 : -1,
            (days & 2) ? 2 : -1,
            (days & 4) ? 3 : -1,
            (days & 8) ? 4 : -1,
            (days & 16) ? 5 : -1,
            (days & 32) ? 6 : -1,
            (days & 64) ? 7 : -1,
        ];
        return nums.filter(function (v) { return v != -1 });
    }

    function MinsToString(min) {
        return (min + "").length == 1 ? "0" + min : "" + min;
    }

    function range(start, end, step = 1) {
        const len = Math.floor((end - start) / step) + 1
        return Array(len).fill().map((_, idx) => start + (idx * step))
    }

    function ToHourMins(hour, min, len) {
        var decStart = parseInt(hour) + parseInt(min) / 60;
        var decDiff = len / 60;
        var decs = range(decStart, decStart + decDiff, 0.25);
        var arr = decs.map(function (d) { var hours = Math.floor(d); mins = (d - hours) * 60; return hours + ":" + MinsToString(mins); });
        arr.pop();
        return arr;
    }


    function TableSlot(startHour, startMins, lengthMins, days, bookings = null, mode = Mode.client)
    {
        this.mStartHour  = startHour;
        this.mStartMins  = startMins;
        this.mLengthMins = lengthMins;
        this.mDays       = days;
        this.mCellCount  = lengthMins / 15;
        this.mBookings   = bookings;
        this.mMode       = mode;
    }

    TableSlot.prototype.print = function ()
    {
        console.log(this.mStartHour);
        console.log(this.mStartMins);
        console.log(this.mLengthMins);
        console.log(this.mDays);
        console.log('--');
    }

    TableSlot.prototype.TdBlock2Elems = function (tdLst)
    {
        var elemLst = [];
        for (var i in tdLst) {
            elemLst.push(document.getElementById(tdLst[i]));
        }
        return elemLst;
    }

    TableSlot.prototype.DrawTdElemBlock = function (tdElemLst, borderStyle, bgColor, booking = null)
    {
        var first = tdElemLst[0];
        var last = tdElemLst[tdElemLst.length - 1];
        first.style.borderTop = borderStyle;
        last.style.borderBottom = borderStyle;

        if (booking != null) {
            first.textContent = booking.Email.length > 20 ? booking.Email.substr(0, 20) : booking.Email;
        }

        for (var i in tdElemLst) {
            var e = tdElemLst[i];
            e.style.borderLeft = borderStyle;
            e.style.borderRight = borderStyle;
            e.style.backgroundColor = bgColor;
        }
    }

    TableSlot.prototype.SetClickHandler = function (tdElemLst, clickHandler)
    {
        for (var i in tdElemLst) {
            var e = tdElemLst[i];
            e.addEventListener('click', clickHandler);
        }
    }


    TableSlot.prototype.WriteToTable = function ()
    {
        var days = DaysToNums(this.mDays);
        var self = this;
        var hourMins = ToHourMins(this.mStartHour, this.mStartMins, this.mLengthMins);

        var dayTDBlocks = days.map(function (d) {
            var prefix = "td" + d;
            return { day: d, hourMins: hourMins.map(function (hm) { return prefix + "-" + hm; }) };
        });

        var elemBlocks = dayTDBlocks.map(function (d_td) { return { day: d_td.day, elemBlock: self.TdBlock2Elems(d_td.hourMins) }; });

        var bookedDays = this.mBookings.map(function (b) { return b.Day; });
        var bookingMap = this.mBookings.map(function (b) { return { day: b.Day, booking:b } });

        elemBlocks.map(function (deb)
        {
            //console.log(bookedDays);
            if ($.inArray(deb.day, bookedDays)) // true if not in booked days
            {
                self.DrawTdElemBlock(deb.elemBlock, '2px solid #000000', '#77ccff');
                //self.SetClickHandler(deb.elemBlock, function () { alert('afaf'); });
                self.SetClickHandler(deb.elemBlock, function ()
                {
                    self.UnreservedClickHandler(deb.elemBlock, event);
                });
            } else
            {
                if (self.mMode == Mode.admin) {
                    var tup = bookingMap.find(function (t) { return t.day == deb.day; });
                    //var booking = bookingMap[deb.day];
                    self.DrawTdElemBlock(deb.elemBlock, '2px solid #000000', '#ffdd77', tup.booking);
                    console.log(tup.booking);
                    self.SetClickHandler(deb.elemBlock, function () {
                        self.AdminClickHandler(tup.booking, event);
                    });
                }
            }
        });
    }

    TableSlot.prototype.UnreservedClickHandler = function (elemBllock, ev) {
        console.log(ev);
        $('#EventInput').show();
        //var firstElem = elemBllock[0];
        var eiWidth = $('#EventInput').width();
        eiWidth = eiWidth > 400 ? 300 : eiWidth;
        //this.mLengthMins
        $("#EventInput").css({ top: ev.clientY + 30, left: ev.clientX - eiWidth / 2, position: 'absolute' });
    }

    TableSlot.prototype.AdminClickHandler = function (booking, ev) {
        console.log(this.mLengthMins);
        console.log(booking.Name    );
        console.log(booking.Email   );

        //document.getElementById('adminEmail').value = this.mLengthMins;
        //document.getElementById('adminEmail').value = "" + this.mLengthMins;
        //document.getElementById('adminPhone').value = booking.Name;
        //document.getElementById('adminDescription').value = booking.Email   ;

        $('#adminEmail'      ).val("" + this.mLengthMins);
        $('#adminPhone'      ).val(booking.Name         );
        $('#adminDescription').val(booking.Email        );

        
        //$('#AdminBookingView').show();
        //$('#AdminBookingView').
        this.ShowOnClickPos('#AdminBookingView', ev);
    }

    TableSlot.prototype.ShowOnClickPos = function (uiElem, ev) {
        $(uiElem).show();
        var eiWidth = $(uiElem).width();
        console.log('a');
        eiWidth = eiWidth > 400 ? 300 : eiWidth;
        this.mLengthMins
        $(uiElem).css({ top: ev.clientY + 30, left: ev.clientX - eiWidth / 2, position: 'absolute' });
    }

    function HideInput(hashInp) {
        //$('#EventInput').hide();
        $(hashInp).hide();
    }


    var slotList = [];
    //var slot = new TableSlot(@Model)



    @{
        foreach (var ts in Model.Schedule.TimeSlots)
        {
            int hour = ts.TimeOfDay.Hours;
            int mins = ts.TimeOfDay.Minutes;
            int lenMins = ts.LengthMinutes;
            int days = ts.DaysOfWeek;

            var bkngs = Model.GetTimeSlotBookgingsInJson(ts, true);
            @:var bookings = [];
            foreach (var b in bkngs)
            {
                @:var jsonBooking = JSON.parse("@b".replace(/&quot;/g, '"'));
                @:console.log(jsonBooking);
                @:bookings.push(jsonBooking);
            }
            @:slotList.push(new TableSlot(@hour, @mins, @lenMins, @days, bookings, Mode.admin));
        }
    }
    slotList.forEach(function (slot) {
        //slot.print();
        slot.WriteToTable();
    });
</script>
