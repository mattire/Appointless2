@model AppointLess2.ViewModels.ScheduleViewModels.TimeSlotVM

@{
    ViewBag.Title = "TimeSlotEdit";
}

<h2>TimeSlotEdit</h2>

<span id="schedStart"   style="display:none">@Model.SchedStart</span>
<span id="schedEnd"     style="display:none">@Model.SchedEnd</span>

<div id="schedTimeSlotMap">

@{ 
    var currentTs = Model.Ts;

    foreach (var ts in Model.Ts.Schedule.TimeSlots) {
        if (ts.Id != currentTs.Id) {
            int dow = ts.DaysOfWeek;
            int todH = ts.TimeOfDay.Hours;
            int todMin = ts.TimeOfDay.Minutes;
            int mins = ts.LengthMinutes;
            <span class="TimeSlot" style="display:none">@todH,@todMin,@mins,@dow</span>
        }
    }
}

</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>TimeSlotVM</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.ScheduleID)

    <input type="hidden" id="CheckboxValues" name="CheckboxValues" value="xxx">

    <div class="form-group">
        @Html.LabelFor(model => model.DaysOfWeek, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @*@Html.EditorFor(model => model.DaysOfWeek, new { htmlAttributes = new { @class = "form-control" } })*@
            @*@Html.CheckBoxListFor(model => model.DaysOfWeek, Model.DaysOfWeek, new { @class = "form-horizontal", @style = "margin-left:40px;" })*@
            @*@Html.CheckBoxFor(model => model.DaysOfWeek.ElementAt(0), , )*@

            @{
                foreach (var day in Model.DaysOfWeek)
                {
                    if (day.Selected)
                    {
                        <input name="@day.Text" id="@day.Text" type="checkbox" checked="checked" value="@day.Text" data-val="true" oninput="inputChanged()"> @day.Text;
                    }
                    else
                    {
                        <input name="@day.Text" id="@day.Text" type="checkbox" value="@day.Text" data-val="true" oninput="inputChanged()"> @day.Text;
                    }
                }
            }
            @*<input type="checkbox" checked="@{ Model.DaysOfWeek.ElementAt(0)  } "> @Model.DaysOfWeek.ElementAt(0).Text <input />*@

            @Html.ValidationMessageFor(model => model.DaysOfWeek, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.TimeOfDay, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.TimeOfDay, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.TimeOfDay, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.LengthMinutes, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.LengthMinutes, new { htmlAttributes = new { @class = "form-control", @min = "0", @step = "15" } })
            @Html.ValidationMessageFor(model => model.LengthMinutes, "", new { @class = "text-danger" })
        </div>
    </div>

    @*<div class="form-group">
            @Html.LabelFor(model => model.ScheduleID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ScheduleID, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ScheduleID, "", new { @class = "text-danger" })
            </div>
        </div>*@

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" accesskey="s" class="btn btn-default" />
        </div>
    </div>
</div>

    <canvas id="schedMiniMap" width="350" height="240"
            style="border:1px solid #c3c3c3;">
        Your browser does not support the canvas element.
    </canvas>

}



<div>
    @Html.ActionLink("Back to List", "Edit", new { id = Model.ScheduleID } , null)
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script src="~/Scripts/jquery-3.3.1.js"></script>
<script>

    function WriteToCanvas(hour, mins, days, color) {
        var canvas = document.getElementById("schedMiniMap");
        var ctx = canvas.getContext("2d");
        ctx.fillStyle = color;
        //ctx.fillRect(0,0,150,75);
        i = 0;
        days.forEach(function (d) {
            if (d == 1) {
                var startX = i * 50;

                var lenX = 50;
                var startY = hour;
                var lenY = mins / 6;
                ctx.fillRect(startX, startY, 50, lenY);
            }
            i++;
        });
    }

    function Lines() {
        var c = document.getElementById("schedMiniMap");
        var ctx = c.getContext("2d");

        for (var i = 1; i < 7; i++) {
            ctx.beginPath();
            ctx.moveTo(i * 50, 0);
            ctx.lineTo(i * 50, 240);
            ctx.stroke();
        }

        var startElem = document.getElementById("schedStart");
        var endElem   = document.getElementById("schedEnd");
        
        if (startElem != undefined && endElem != undefined) {
            var dayStart = parseInt(startElem.textContent) * 10;
            var dayEnd = parseInt(endElem.textContent) * 10;

            ctx.beginPath();
            ctx.moveTo(0, dayStart );
            ctx.lineTo(350, dayStart);
            ctx.stroke();

            ctx.beginPath();
            ctx.moveTo(0, dayEnd);
            ctx.lineTo(350, dayEnd);
            ctx.stroke();
        }
    }

    function ReadWeekDays() {
        var Ma  = document.getElementById("Ma");
        var Ti  = document.getElementById("Ti");
        var Ke  = document.getElementById("Ke");
        var To  = document.getElementById("To");
        var Pe  = document.getElementById("Pe");
        var La  = document.getElementById("La");
        var Su = document.getElementById("Su");
        
        return [
            Ma.checked == true ? 1 : 0,
            Ti.checked == true ? 1 : 0,
            Ke.checked == true ? 1 : 0,
            To.checked == true ? 1 : 0,
            Pe.checked == true ? 1 : 0,
            La.checked == true ? 1 : 0,
            Su.checked == true ? 1 : 0,
        ];
    }

    function clearCanvas() {
        var c = document.getElementById("schedMiniMap");
        var ctx = c.getContext("2d");
        ctx.clearRect(0, 0, c.width, c.height);
    }

    function ReadTimeAndLength() {
        var tod = document.getElementById("TimeOfDay");
        var lm = document.getElementById("LengthMinutes");
        
        return {
            tod: tod.value,
            lm: lm.value,
        };
    }

    $('document').ready(function () {
        try {
            //var color = "#FF0000";
            //var array1 = [1, 1, 0, 0, 1, 0, 0];
            //WriteToCanvas(80, 60, array1, color);
            //array1 = [1, 1, 1, 1, 1, 0, 0];
            //color = "#0000FF";
            //WriteToCanvas(100, 60, array1, color);
            //Lines();
            inputChanged();
        } catch (ex) {
            alert(ex);
        }
    });

    function readTSMap() {
        var tsLst = document.getElementsByClassName("TimeSlot");
        var arr = Array.prototype.slice.call(tsLst);
        var contentsLst = arr.map(function (a) { return a.textContent; });
        return contentsLst;
    }

    function binaryDowToBoolList(bVal) {
        return [
            (bVal & 1)  != 0,
            (bVal & 2)  != 0,
            (bVal & 4)  != 0,
            (bVal & 8)  != 0,
            (bVal & 16) != 0,
            (bVal & 32) != 0,
            (bVal & 64) != 0,
        ];
    }

    var roundChange = false;

    function roundInputs(h, m, mins) {
        var lenMins = Math.round(mins / 15) * 15;
        var startMins = Math.round(m / 15) * 15;
        var newSTart = h + ":" + startMins;
        console.log(newSTart);
        roundChange = true;
        //$('#TimeOfDay').value = h + ":" + startMins;
        //$('#LengthMinutes').value = lenMins;
        var tod = document.getElementById("TimeOfDay");
        var lm = document.getElementById("LengthMinutes");
        tod.value = newSTart;
        lm.value = lenMins;
        roundChange = false;
    }

    function inputChanged() {
        console.log("changed");
        if (roundChange) { return; }
        clearCanvas();
        var { tod, lm } = ReadTimeAndLength();
        console.log(tod);

        var days = ReadWeekDays();
        var h = parseInt(tod.split(":")[0]);

        var m = parseInt(tod.split(":")[1]);
        var mins = parseInt(lm);

        roundInputs(h, m, mins);

        var y = Math.round((h + m / 60) * 10);
        WriteToCanvas(y, mins, days, "#FF000088");

        var tslLst = readTSMap();
        console.log(tslLst);

        tslLst.forEach(function (tsl) {
            var ints = tsl.split(",").map(function (s) { return parseInt(s); });
            var days = binaryDowToBoolList(ints[3]);
            var h = ints[0];
            var m = ints[1];
            var mins = ints[2];
            var y = Math.round((h + m / 60) * 10);
            WriteToCanvas(y, mins, days, "#0000FF88");
        });
        //WriteToCanvas(y, mins, days, rgba(10, 10, 10, 1));
        
        Lines();
    }

    $('#TimeOfDay')     .change(function () { inputChanged(); });
    $('#LengthMinutes') .change(function () { inputChanged(); });

</script>


