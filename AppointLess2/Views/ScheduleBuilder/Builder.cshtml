@model AppointLess2.ViewModels.ScheduleViewModels.ScheduleVM

@{
    ViewBag.Title = "Builder";
}
<br />
<h2>Ajanvarauslistan aikojen hallinta</h2>

@if (Model != null) {
}

@using (Html.BeginForm("Edit", "ScheduleBuilder", new { Id = Model.Id }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <hr />
    <h4>Yleiset tiedot</h4>
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.UserID)

    <div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>

    @*<input type="number" name="DailyEndTime" min="0" max="24">*@

    <div class="form-group">
        @Html.LabelFor(model => model.DailyStartTime, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.DailyStartTime, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DailyStartTime, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.DailyEndTime, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.DailyEndTime, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DailyEndTime, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ShowOnFrontPage, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ShowOnFrontPage, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ShowOnFrontPage, "", new { @class = "text-danger" })
        </div>
    </div>

    @*<input type="number" name="DailyStartTime" min="0" max="24">*@
    @*<input type="number" name="DailyEndTime" min="0" max="24">*@


    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>

    @*@Html.Partial("TimeSlotLst", Model.TimeSlotVMs)*@
    @Html.Partial("TimeSlotLst", new Tuple<int, IEnumerable<AppointLess2.ViewModels.ScheduleViewModels.TimeSlotVM>>(Model.Id, Model.TimeSlotVMs))

</div>
}
<div>
    @Html.ActionLink("Takaisin aikataululistaan", "Index", "Home")
</div>

<div class="jumbotron">

    <h4>Viikkonäkymä</h4>

    @{
        // Write schedule timeslots for javascript
        var timeSlots = Model.TimeSlotVMs.Select(ts =>
                                        new {
                                            hour = ts.TimeOfDay.Hours,
                                            min = ts.TimeOfDay.Minutes,
                                            lenghtMins = ts.LengthMinutes,
                                            days = ts.DaysInt
                                        });
        foreach (var slot in timeSlots)
        {
            <span class="timeslot" style="display:none">@slot.hour,@slot.min,@slot.lenghtMins,@slot.days</span>
        }

        int startHour = 0;
        int endHour = 24;

        if (Model.DailyStartTime != null && Model.DailyEndTime != null)
        {
            startHour = (int)Model.DailyStartTime;
            endHour = (int)Model.DailyEndTime;
        }
        else
        {
            Model.DailyStartTime = startHour;
            Model.DailyEndTime = endHour;
        }

        @*<table style="border: 1px solid black;">*@
        <table style="table-layout: fixed; width: 100%;">
            @{
                <tr>
                    <th></th>
                    <th>Ma</th>
                    <th>Ti</th>
                    <th>Ke</th>
                    <th>To</th>
                    <th>Pe</th>
                    <th>La</th>
                    <th>Su</th>
                </tr>

                var quarterMins = new List<string>() { "00", "15", "30", "45" };
                for (int hour = startHour; hour < endHour; hour++)
                {
                    foreach (var mins in quarterMins)
                    {
                        <tr>
                            <td>@hour:@mins</td>
                            <td id="td1-@hour:@mins"></td>
                            <td id="td2-@hour:@mins"></td>
                            <td id="td3-@hour:@mins"></td>
                            <td id="td4-@hour:@mins"></td>
                            <td id="td5-@hour:@mins"></td>
                            <td id="td6-@hour:@mins"></td>
                            <td id="td7-@hour:@mins"></td>
                        </tr>
                    }
                }
            }
        </table>
    }

</div>

    <div>
        @Html.ActionLink("Takaisin aikataululistaan", "Index", "Home")
    </div>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }

<script src="~/Scripts/jquery-3.3.1.js"></script>
<script>
    function DaysToNums(days) {
        var nums = [
            (days & 1)  ? 1 : -1,
            (days & 2)  ? 2 : -1,
            (days & 4)  ? 3 : -1,
            (days & 8)  ? 4 : -1,
            (days & 16) ? 5 : -1,
            (days & 32) ? 6 : -1,
            (days & 64) ? 7 : -1,
        ];
        return nums.filter(function (v) { return v != -1 });
    }

    function ToSlotTds(se, cellCount)
    {
        var num = se.split("-")[0].substr(2);
        var hm = se.split("-")[1].split(":");
        var dec = parseInt(hm[0]) + parseInt(hm[1]) / 60;
        //var slotDecs = [];
        var arr = new Array(cellCount).fill("");
        arr[0] = se;
        for (var i=1; i < cellCount; i++) {
            var newDecVal = dec + i / 4;
            var remainder = newDecVal % 1;
            var newHours = newDecVal - remainder;
            var newMins = (remainder * 100 / 25) * 15; 
            var strMin = (newMins + "").length == 1 ? "0" + newMins : "" + newMins;
            arr[i] = "td" + num + "-" + newHours + ":" + strMin;
        }
        return arr;
    }

    function WriteTsToTable(tsStr)
    {
        var spl = tsStr.split(",");
        var hour = spl[0];
        var min = spl[1];
        var lenMins = spl[2];
        var days = spl[3];
        var dnums = DaysToNums(days);

        var strMin = (min + "").length == 1 ? "0" + min : "" + min;

        var cellCount = lenMins / 15;

        var startHourMin = hour + ":" + strMin;
        var startElems = dnums.map(function (num) { return "td" + num + "-" + startHourMin; });
        //console.log(startElems);
        for (var se in startElems) {
            var str = startElems[se];
            var strIdArray = ToSlotTds(str, cellCount);
            for (var i in strIdArray) {
                console.log(strIdArray[i]);
                var elem1 = document.getElementById(strIdArray[i]);

                elem1.style.backgroundColor = '#00aaff';
            }
            //var elem = document.getElementById(startElems[se]);
            //elem.style.backgroundColor = '#dddddd';
        }
    }

    $(document).ready(function () {
        //var dst = @Model.DailyStartTime;
        //var det = @Model.DailyEndTime;
        var timeSlots = document.getElementsByClassName("timeslot");
        var arr = Array.prototype.slice.call(timeSlots);
        var contentsLst = arr.map(function (a) { return a.textContent; });
        console.log(contentsLst);
        for (var i in contentsLst) {
            WriteTsToTable(contentsLst[i]);
        }
    });

</script>




